#!/usr/bin/env python3
"""Update all git repositories in the current working directory."""
import asyncio
import itertools
import pathlib
import random
import shlex
import sys

if not sys.version_info > (3, 7):
    raise RuntimeError('Requires python >= 3.7')

reset = '\u001b[0m'
colors = tuple(f'\u001b[38;5;{i*16+j}m ' for i in range(16) for j in range(16))
colors = itertools.cycle(random.sample(colors, k=len(colors)))

def list_repos():
    """List all git repos in the current directory"""
    return tuple(str(file) for file in pathlib.Path().iterdir()
                 if file.is_dir() and (file/'.git').is_dir())

async def git_pull(directory):
    prefix = f'{next(colors)}{directory}{reset}'
    process = await asyncio.create_subprocess_shell(
        f'git -c color.ui=always -C {shlex.quote(directory)} pull origin master',
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await process.communicate()
    for line in stderr.decode().splitlines():
        print(prefix, '[stderr]: ', line, file=sys.stderr)
    for line in stdout.decode().splitlines():
        print(prefix, '[stdout]: ', line)

async def main():
    tasks = [git_pull(directory) for directory in list_repos()]
    if not tasks:
        print('No repositories present', file=sys.stderr)
        raise SystemExit(1)
    await asyncio.gather(*tasks)

if __name__ == '__main__':
    asyncio.run(main())
